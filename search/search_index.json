{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SuUAV - Documenta\u00e7\u00e3o Bem-vindo \u00e0 documenta\u00e7\u00e3o do SuUAV , uma ferramenta para constru\u00e7\u00e3o de cen\u00e1rios de mobilidade com UAVs (Ve\u00edculos A\u00e9reos N\u00e3o Tripulados). Esta ferramenta facilita a integra\u00e7\u00e3o de UAVs em simula\u00e7\u00f5es de tr\u00e1fego geradas pelo SUMO, permitindo a gera\u00e7\u00e3o de cen\u00e1rios complexos e a visualiza\u00e7\u00e3o dos resultados por meio de v\u00eddeos. Instala\u00e7\u00e3o de dependencias no Linux Devido ao gerenciador de pacotes do linux, \u00e9 poss\u00edvel instalar a ferramenta pelo terminal. sudo apt install python3 pip ffmpeg Instala\u00e7\u00e3o Para utilizar o SuUAV , siga os passos abaixo: Clone o reposit\u00f3rio : git clone https://github.com/MateusSantos14/SuUAV cd SuUAV Crie um ambiente virtual e instale as depend\u00eancias : Certifique-se de ter o Python 3.11.4 e o pip est\u00e3o instalados. Em seguida, instale as depend\u00eancias necess\u00e1rias: python3 -m venv .venv source .venv/bin/activate pip install -r requirements.txt Dep\u00eandencias Python pip ffmpeg Caso n\u00e3o consiga instalar as dep\u00eandencias pelo terminal,\u00e9 poss\u00edvel instalar nos respectivos sites das organiza\u00e7\u00f5es Uso B\u00e1sico O SuUAV pode ser executado com dois comandos principais: --setup e --run . Configura\u00e7\u00e3o Inicial ( --setup ) O comando --setup abre uma interface interativa para configurar os pontos iniciais dos UAVs no mapa. Para usar: python3 SuUAV.py --setup -i caminho/do/arquivo_trace.xml -i ou --input: Caminho para o arquivo de trace .xml. Execu\u00e7\u00e3o da Simula\u00e7\u00e3o (--run) O comando --run executa a simula\u00e7\u00e3o com base no arquivo de configura\u00e7\u00e3o fornecido. Para usar: python3 SuUAV.py --run -i caminho/do/arquivo_de_configuracao.ini -i ou --input: Caminho para o arquivo de configura\u00e7\u00e3o .ini. Exemplo de execu\u00e7\u00e3o Para testar a aplica\u00e7\u00e3o funcionando, rode o comando abaixo: python3 SuUAV.py --setup -i example.xml Escolha os UAVs que deseja adicionar, e clique em confirmar Em seguida, rode o comando e aguarde o v\u00eddeo ser gerado: python3 SuUAV.py --setup -i example.ini Ap\u00f3s isso, ser\u00e1 gerado o v\u00eddeo example_video.mp4 e o trace exampleUAV.xml","title":"Home"},{"location":"#suuav-documentacao","text":"Bem-vindo \u00e0 documenta\u00e7\u00e3o do SuUAV , uma ferramenta para constru\u00e7\u00e3o de cen\u00e1rios de mobilidade com UAVs (Ve\u00edculos A\u00e9reos N\u00e3o Tripulados). Esta ferramenta facilita a integra\u00e7\u00e3o de UAVs em simula\u00e7\u00f5es de tr\u00e1fego geradas pelo SUMO, permitindo a gera\u00e7\u00e3o de cen\u00e1rios complexos e a visualiza\u00e7\u00e3o dos resultados por meio de v\u00eddeos.","title":"SuUAV - Documenta\u00e7\u00e3o"},{"location":"#instalacao-de-dependencias-no-linux","text":"Devido ao gerenciador de pacotes do linux, \u00e9 poss\u00edvel instalar a ferramenta pelo terminal. sudo apt install python3 pip ffmpeg","title":"Instala\u00e7\u00e3o de dependencias no Linux"},{"location":"#instalacao","text":"Para utilizar o SuUAV , siga os passos abaixo: Clone o reposit\u00f3rio : git clone https://github.com/MateusSantos14/SuUAV cd SuUAV Crie um ambiente virtual e instale as depend\u00eancias : Certifique-se de ter o Python 3.11.4 e o pip est\u00e3o instalados. Em seguida, instale as depend\u00eancias necess\u00e1rias: python3 -m venv .venv source .venv/bin/activate pip install -r requirements.txt","title":"Instala\u00e7\u00e3o"},{"location":"#dependencias","text":"Python pip ffmpeg Caso n\u00e3o consiga instalar as dep\u00eandencias pelo terminal,\u00e9 poss\u00edvel instalar nos respectivos sites das organiza\u00e7\u00f5es","title":"Dep\u00eandencias"},{"location":"#uso-basico","text":"O SuUAV pode ser executado com dois comandos principais: --setup e --run .","title":"Uso B\u00e1sico"},{"location":"#configuracao-inicial-setup","text":"O comando --setup abre uma interface interativa para configurar os pontos iniciais dos UAVs no mapa. Para usar: python3 SuUAV.py --setup -i caminho/do/arquivo_trace.xml -i ou --input: Caminho para o arquivo de trace .xml.","title":"Configura\u00e7\u00e3o Inicial (--setup)"},{"location":"#execucao-da-simulacao-run","text":"O comando --run executa a simula\u00e7\u00e3o com base no arquivo de configura\u00e7\u00e3o fornecido. Para usar: python3 SuUAV.py --run -i caminho/do/arquivo_de_configuracao.ini -i ou --input: Caminho para o arquivo de configura\u00e7\u00e3o .ini.","title":"Execu\u00e7\u00e3o da Simula\u00e7\u00e3o (--run)"},{"location":"#exemplo-de-execucao","text":"Para testar a aplica\u00e7\u00e3o funcionando, rode o comando abaixo: python3 SuUAV.py --setup -i example.xml Escolha os UAVs que deseja adicionar, e clique em confirmar Em seguida, rode o comando e aguarde o v\u00eddeo ser gerado: python3 SuUAV.py --setup -i example.ini Ap\u00f3s isso, ser\u00e1 gerado o v\u00eddeo example_video.mp4 e o trace exampleUAV.xml","title":"Exemplo de execu\u00e7\u00e3o"},{"location":"SuUAV/","text":"API Documentation ::: src.Simulation handler: python options: docstring_style: google","title":"API Documentation"},{"location":"SuUAV/#api-documentation","text":"::: src.Simulation handler: python options: docstring_style: google","title":"API Documentation"},{"location":"example/","text":"Se\u00e7\u00f5es do Arquivo de Configura\u00e7\u00e3o trace_path ( str ): Caminho do arquivo de trace a ser utilizado na simula\u00e7\u00e3o. Se\u00e7\u00e3o DroneCircular center ( Tuple[float, float] ): Coordenadas do centro do drone circular. radius_meters ( int ): Raio do drone circular em metros. max_speed ( int , opcional): Velocidade m\u00e1xima do drone. Valor padr\u00e3o: 10 . start_angle ( int , opcional): \u00c2ngulo inicial do drone. Valor padr\u00e3o: 0 . Se\u00e7\u00e3o DroneAngular start_point ( Tuple[float, float] ): Ponto inicial do drone angular. max_length ( int ): Comprimento m\u00e1ximo do drone angular. start_angle ( int , opcional): \u00c2ngulo inicial do drone. Valor padr\u00e3o: 0 . max_turns ( int , opcional): N\u00famero m\u00e1ximo de voltas. Valor padr\u00e3o: 3 . angle_alpha ( int , opcional): \u00c2ngulo alfa. Valor padr\u00e3o: 30 . max_speed ( int , opcional): Velocidade m\u00e1xima do drone. Valor padr\u00e3o: 10 . Se\u00e7\u00e3o DroneTractor start_point ( Tuple[float, float] ): Ponto inicial do drone trator. width_between_tracks ( int ): Largura entre as trilhas. max_length ( int ): Comprimento m\u00e1ximo. max_turns ( int ): N\u00famero m\u00e1ximo de voltas. orientation ( str , opcional): Orienta\u00e7\u00e3o do drone. Valor padr\u00e3o: \"horizontal\" . max_speed ( int , opcional): Velocidade m\u00e1xima do drone. Valor padr\u00e3o: 10 . Se\u00e7\u00e3o DroneStatic point ( Tuple[float, float] ): Ponto onde o drone est\u00e1tico ser\u00e1 criado. Se\u00e7\u00e3o DroneSquare center_point ( Tuple[float, float] ): Ponto central do drone quadrado. side_length ( int ): Comprimento do lado do quadrado. angle_degrees ( int , opcional): \u00c2ngulo do quadrado. Valor padr\u00e3o: 90 . max_speed ( int , opcional): Velocidade m\u00e1xima do drone. Valor padr\u00e3o: 10 . Se\u00e7\u00e3o DroneFollowing vehicle_id ( str , opcional): ID do ve\u00edculo a ser seguido. Valor padr\u00e3o: \"0\" . offset_distance ( int , opcional): Dist\u00e2ncia de offset. Valor padr\u00e3o: 10 . max_speed ( int , opcional): Velocidade m\u00e1xima do drone. Valor padr\u00e3o: 10 . Se\u00e7\u00e3o ExportVideo video_directory ( str ): Diret\u00f3rio onde o v\u00eddeo ser\u00e1 exportado. limits_map ( Optional[Tuple[float, float]] , opcional): Limites do mapa. Valor padr\u00e3o: 0 . only_vants ( int , opcional): Exportar apenas vants. Valor padr\u00e3o: 0 . Se\u00e7\u00e3o ExportXML new_xml_path ( str ): Caminho do novo arquivo XML. geo ( int , opcional): Configura\u00e7\u00e3o geogr\u00e1fica. Valor padr\u00e3o: 1 . Se\u00e7\u00e3o ChangeLegend old_legend ( str ): Legenda antiga. new_legend ( str ): Nova legenda. Se\u00e7\u00e3o PrintVehicleInfo vehicle_id ( str ): ID do ve\u00edculo cujas informa\u00e7\u00f5es ser\u00e3o impressas. Se\u00e7\u00e3o RemoveVehicle vehicle_id ( str ): ID do ve\u00edculo a ser removido. Exemplo de arquivo de configura\u00e7\u00e3o [Simulation] trace_path = manhattan.xml [DroneCircular] center = -73.986478, 40.744406 radius_meters = 40 max_speed = 10 start_angle = 0 [DroneAngular] start_point = -73.983754, 40.745802 max_length = 40 max_turns = 3 angle_alpha = 30 max_speed = 10 [DroneTractor] start_point = -73.983754, 40.745802 width_between_tracks = 70 max_length = 100 max_turns = 6 orientation = vertical max_speed = 10 [DroneStatic] point = -73.983754, 40.745802 [DroneFollowing] vehicle_id = 14 offset_distance = 10 max_speed = 10 [DroneSquare] center_point = -73.983754, 40.745802 side_length = 50 angle_degrees = 90 max_speed = 10 [ChangeLegend1] old_legend = VANT new_legend = UAV [ChangeLegend2] old_legend = type new_legend = Car [ExportVideo] video_directory = output_video only_vants = 0 [ExportXML] new_xml_path = output_simulation.xml geo = 0 Detalhes: Ao criar o arquivo de configura\u00e7\u00e3o, \u00e9 importante manter uma ordem coesa. As configura\u00e7\u00f5es s\u00e3o lidas na ordem, ent\u00e3o, se for remover um veiculo, o comando deve vir antes da exporta\u00e7\u00e3o. Se for alterar alguma legenda do v\u00eddeo, o comando deve vir antes de exportar para v\u00eddeo.","title":"example.ini"},{"location":"example/#secoes-do-arquivo-de-configuracao","text":"trace_path ( str ): Caminho do arquivo de trace a ser utilizado na simula\u00e7\u00e3o.","title":"Se\u00e7\u00f5es do Arquivo de Configura\u00e7\u00e3o"},{"location":"example/#secao-dronecircular","text":"center ( Tuple[float, float] ): Coordenadas do centro do drone circular. radius_meters ( int ): Raio do drone circular em metros. max_speed ( int , opcional): Velocidade m\u00e1xima do drone. Valor padr\u00e3o: 10 . start_angle ( int , opcional): \u00c2ngulo inicial do drone. Valor padr\u00e3o: 0 .","title":"Se\u00e7\u00e3o DroneCircular"},{"location":"example/#secao-droneangular","text":"start_point ( Tuple[float, float] ): Ponto inicial do drone angular. max_length ( int ): Comprimento m\u00e1ximo do drone angular. start_angle ( int , opcional): \u00c2ngulo inicial do drone. Valor padr\u00e3o: 0 . max_turns ( int , opcional): N\u00famero m\u00e1ximo de voltas. Valor padr\u00e3o: 3 . angle_alpha ( int , opcional): \u00c2ngulo alfa. Valor padr\u00e3o: 30 . max_speed ( int , opcional): Velocidade m\u00e1xima do drone. Valor padr\u00e3o: 10 .","title":"Se\u00e7\u00e3o DroneAngular"},{"location":"example/#secao-dronetractor","text":"start_point ( Tuple[float, float] ): Ponto inicial do drone trator. width_between_tracks ( int ): Largura entre as trilhas. max_length ( int ): Comprimento m\u00e1ximo. max_turns ( int ): N\u00famero m\u00e1ximo de voltas. orientation ( str , opcional): Orienta\u00e7\u00e3o do drone. Valor padr\u00e3o: \"horizontal\" . max_speed ( int , opcional): Velocidade m\u00e1xima do drone. Valor padr\u00e3o: 10 .","title":"Se\u00e7\u00e3o DroneTractor"},{"location":"example/#secao-dronestatic","text":"point ( Tuple[float, float] ): Ponto onde o drone est\u00e1tico ser\u00e1 criado.","title":"Se\u00e7\u00e3o DroneStatic"},{"location":"example/#secao-dronesquare","text":"center_point ( Tuple[float, float] ): Ponto central do drone quadrado. side_length ( int ): Comprimento do lado do quadrado. angle_degrees ( int , opcional): \u00c2ngulo do quadrado. Valor padr\u00e3o: 90 . max_speed ( int , opcional): Velocidade m\u00e1xima do drone. Valor padr\u00e3o: 10 .","title":"Se\u00e7\u00e3o DroneSquare"},{"location":"example/#secao-dronefollowing","text":"vehicle_id ( str , opcional): ID do ve\u00edculo a ser seguido. Valor padr\u00e3o: \"0\" . offset_distance ( int , opcional): Dist\u00e2ncia de offset. Valor padr\u00e3o: 10 . max_speed ( int , opcional): Velocidade m\u00e1xima do drone. Valor padr\u00e3o: 10 .","title":"Se\u00e7\u00e3o DroneFollowing"},{"location":"example/#secao-exportvideo","text":"video_directory ( str ): Diret\u00f3rio onde o v\u00eddeo ser\u00e1 exportado. limits_map ( Optional[Tuple[float, float]] , opcional): Limites do mapa. Valor padr\u00e3o: 0 . only_vants ( int , opcional): Exportar apenas vants. Valor padr\u00e3o: 0 .","title":"Se\u00e7\u00e3o ExportVideo"},{"location":"example/#secao-exportxml","text":"new_xml_path ( str ): Caminho do novo arquivo XML. geo ( int , opcional): Configura\u00e7\u00e3o geogr\u00e1fica. Valor padr\u00e3o: 1 .","title":"Se\u00e7\u00e3o ExportXML"},{"location":"example/#secao-changelegend","text":"old_legend ( str ): Legenda antiga. new_legend ( str ): Nova legenda.","title":"Se\u00e7\u00e3o ChangeLegend"},{"location":"example/#secao-printvehicleinfo","text":"vehicle_id ( str ): ID do ve\u00edculo cujas informa\u00e7\u00f5es ser\u00e3o impressas.","title":"Se\u00e7\u00e3o PrintVehicleInfo"},{"location":"example/#secao-removevehicle","text":"vehicle_id ( str ): ID do ve\u00edculo a ser removido.","title":"Se\u00e7\u00e3o RemoveVehicle"},{"location":"example/#exemplo-de-arquivo-de-configuracao","text":"[Simulation] trace_path = manhattan.xml [DroneCircular] center = -73.986478, 40.744406 radius_meters = 40 max_speed = 10 start_angle = 0 [DroneAngular] start_point = -73.983754, 40.745802 max_length = 40 max_turns = 3 angle_alpha = 30 max_speed = 10 [DroneTractor] start_point = -73.983754, 40.745802 width_between_tracks = 70 max_length = 100 max_turns = 6 orientation = vertical max_speed = 10 [DroneStatic] point = -73.983754, 40.745802 [DroneFollowing] vehicle_id = 14 offset_distance = 10 max_speed = 10 [DroneSquare] center_point = -73.983754, 40.745802 side_length = 50 angle_degrees = 90 max_speed = 10 [ChangeLegend1] old_legend = VANT new_legend = UAV [ChangeLegend2] old_legend = type new_legend = Car [ExportVideo] video_directory = output_video only_vants = 0 [ExportXML] new_xml_path = output_simulation.xml geo = 0","title":"Exemplo de arquivo de configura\u00e7\u00e3o"},{"location":"example/#detalhes","text":"Ao criar o arquivo de configura\u00e7\u00e3o, \u00e9 importante manter uma ordem coesa. As configura\u00e7\u00f5es s\u00e3o lidas na ordem, ent\u00e3o, se for remover um veiculo, o comando deve vir antes da exporta\u00e7\u00e3o. Se for alterar alguma legenda do v\u00eddeo, o comando deve vir antes de exportar para v\u00eddeo.","title":"Detalhes:"},{"location":"funcs/parser/","text":"Fun\u00e7\u00e3o parse_config_and_run A fun\u00e7\u00e3o parse_config_and_run \u00e9 respons\u00e1vel por ler um arquivo de configura\u00e7\u00e3o e executar as fun\u00e7\u00f5es correspondentes com base nas se\u00e7\u00f5es e par\u00e2metros definidos no arquivo. Par\u00e2metros config_file ( str ): Caminho do arquivo de configura\u00e7\u00e3o. Exce\u00e7\u00f5es ValueError : Lan\u00e7ada se a se\u00e7\u00e3o Simulation n\u00e3o for encontrada no arquivo de configura\u00e7\u00e3o. Descri\u00e7\u00e3o A fun\u00e7\u00e3o l\u00ea o arquivo de configura\u00e7\u00e3o usando o m\u00f3dulo configparser e, em seguida, inicializa uma simula\u00e7\u00e3o com base nas configura\u00e7\u00f5es fornecidas. Dependendo das se\u00e7\u00f5es presentes no arquivo de configura\u00e7\u00e3o, a fun\u00e7\u00e3o cria diferentes tipos de drones, exporta a simula\u00e7\u00e3o para v\u00eddeo ou XML, altera legendas, remove ve\u00edculos, entre outras opera\u00e7\u00f5es. Exemplo de Uso ```python parse_config_and_run(\"config.ini\")","title":"parser.py"},{"location":"funcs/parser/#funcao-parse_config_and_run","text":"A fun\u00e7\u00e3o parse_config_and_run \u00e9 respons\u00e1vel por ler um arquivo de configura\u00e7\u00e3o e executar as fun\u00e7\u00f5es correspondentes com base nas se\u00e7\u00f5es e par\u00e2metros definidos no arquivo.","title":"Fun\u00e7\u00e3o parse_config_and_run"},{"location":"funcs/parser/#parametros","text":"config_file ( str ): Caminho do arquivo de configura\u00e7\u00e3o.","title":"Par\u00e2metros"},{"location":"funcs/parser/#excecoes","text":"ValueError : Lan\u00e7ada se a se\u00e7\u00e3o Simulation n\u00e3o for encontrada no arquivo de configura\u00e7\u00e3o.","title":"Exce\u00e7\u00f5es"},{"location":"funcs/parser/#descricao","text":"A fun\u00e7\u00e3o l\u00ea o arquivo de configura\u00e7\u00e3o usando o m\u00f3dulo configparser e, em seguida, inicializa uma simula\u00e7\u00e3o com base nas configura\u00e7\u00f5es fornecidas. Dependendo das se\u00e7\u00f5es presentes no arquivo de configura\u00e7\u00e3o, a fun\u00e7\u00e3o cria diferentes tipos de drones, exporta a simula\u00e7\u00e3o para v\u00eddeo ou XML, altera legendas, remove ve\u00edculos, entre outras opera\u00e7\u00f5es.","title":"Descri\u00e7\u00e3o"},{"location":"funcs/parser/#exemplo-de-uso","text":"```python parse_config_and_run(\"config.ini\")","title":"Exemplo de Uso"},{"location":"interface/InteractivePlot/","text":"Documenta\u00e7\u00e3o do M\u00f3dulo InteractivePlot O m\u00f3dulo InteractivePlot permite a cria\u00e7\u00e3o de uma interface gr\u00e1fica interativa para selecionar pontos em um mapa e gerar um arquivo de configura\u00e7\u00e3o baseado nos pontos selecionados. Requisitos Para utilizar este m\u00f3dulo, \u00e9 necess\u00e1rio instalar as seguintes bibliotecas: matplotlib xml.etree.ElementTree contextily shapely geopandas configparser Utiliza\u00e7\u00e3o Classe InteractivePlot A classe InteractivePlot \u00e9 a principal classe do m\u00f3dulo. Ela \u00e9 respons\u00e1vel por criar a interface gr\u00e1fica e gerar o arquivo de configura\u00e7\u00e3o. M\u00e9todos __init__(self, xml_file) : Inicializa a classe com o caminho do arquivo XML contendo as coordenadas dos ve\u00edculos. extract_coordinates(self, xml_file) : Extrai as coordenadas dos ve\u00edculos do arquivo XML. on_mouse_move(self, event) : Atualiza as coordenadas exibidas na interface conforme o movimento do mouse. on_click(self, event) : Adiciona um ponto ao mapa quando o usu\u00e1rio clica em uma \u00e1rea v\u00e1lida. on_confirm(self, event) : Fecha a interface gr\u00e1fica quando o bot\u00e3o de confirma\u00e7\u00e3o \u00e9 clicado. on_pattern_select(self, label) : Atualiza o padr\u00e3o selecionado com base na escolha do usu\u00e1rio. generate_config(self) : Gera um arquivo de configura\u00e7\u00e3o ( config.ini ) com base nos pontos selecionados. show(self) : Exibe a interface gr\u00e1fica interativa. Fun\u00e7\u00e3o run(path) A fun\u00e7\u00e3o run(path) \u00e9 a fun\u00e7\u00e3o principal para executar a interface gr\u00e1fica e gerar o arquivo de configura\u00e7\u00e3o. Par\u00e2metros path : Caminho do arquivo XML. Exemplo de Uso ```python from interactive_plot import run Caminho do arquivo XML xml_file = \"caminho/para/seu/arquivo.xml\" Executa a interface gr\u00e1fica e gera o arquivo de configura\u00e7\u00e3o run(xml_file)","title":"InteractivePlot.py"},{"location":"interface/InteractivePlot/#documentacao-do-modulo-interactiveplot","text":"O m\u00f3dulo InteractivePlot permite a cria\u00e7\u00e3o de uma interface gr\u00e1fica interativa para selecionar pontos em um mapa e gerar um arquivo de configura\u00e7\u00e3o baseado nos pontos selecionados.","title":"Documenta\u00e7\u00e3o do M\u00f3dulo InteractivePlot"},{"location":"interface/InteractivePlot/#requisitos","text":"Para utilizar este m\u00f3dulo, \u00e9 necess\u00e1rio instalar as seguintes bibliotecas: matplotlib xml.etree.ElementTree contextily shapely geopandas configparser","title":"Requisitos"},{"location":"interface/InteractivePlot/#utilizacao","text":"","title":"Utiliza\u00e7\u00e3o"},{"location":"interface/InteractivePlot/#classe-interactiveplot","text":"A classe InteractivePlot \u00e9 a principal classe do m\u00f3dulo. Ela \u00e9 respons\u00e1vel por criar a interface gr\u00e1fica e gerar o arquivo de configura\u00e7\u00e3o.","title":"Classe InteractivePlot"},{"location":"interface/InteractivePlot/#metodos","text":"__init__(self, xml_file) : Inicializa a classe com o caminho do arquivo XML contendo as coordenadas dos ve\u00edculos. extract_coordinates(self, xml_file) : Extrai as coordenadas dos ve\u00edculos do arquivo XML. on_mouse_move(self, event) : Atualiza as coordenadas exibidas na interface conforme o movimento do mouse. on_click(self, event) : Adiciona um ponto ao mapa quando o usu\u00e1rio clica em uma \u00e1rea v\u00e1lida. on_confirm(self, event) : Fecha a interface gr\u00e1fica quando o bot\u00e3o de confirma\u00e7\u00e3o \u00e9 clicado. on_pattern_select(self, label) : Atualiza o padr\u00e3o selecionado com base na escolha do usu\u00e1rio. generate_config(self) : Gera um arquivo de configura\u00e7\u00e3o ( config.ini ) com base nos pontos selecionados. show(self) : Exibe a interface gr\u00e1fica interativa.","title":"M\u00e9todos"},{"location":"interface/InteractivePlot/#funcao-runpath","text":"A fun\u00e7\u00e3o run(path) \u00e9 a fun\u00e7\u00e3o principal para executar a interface gr\u00e1fica e gerar o arquivo de configura\u00e7\u00e3o.","title":"Fun\u00e7\u00e3o run(path)"},{"location":"interface/InteractivePlot/#parametros","text":"path : Caminho do arquivo XML.","title":"Par\u00e2metros"},{"location":"interface/InteractivePlot/#exemplo-de-uso","text":"```python from interactive_plot import run","title":"Exemplo de Uso"},{"location":"interface/InteractivePlot/#caminho-do-arquivo-xml","text":"xml_file = \"caminho/para/seu/arquivo.xml\"","title":"Caminho do arquivo XML"},{"location":"interface/InteractivePlot/#executa-a-interface-grafica-e-gera-o-arquivo-de-configuracao","text":"run(xml_file)","title":"Executa a interface gr\u00e1fica e gera o arquivo de configura\u00e7\u00e3o"},{"location":"src/Simulation/","text":"Documenta\u00e7\u00e3o da Classe Simulation A classe Simulation \u00e9 respons\u00e1vel por representar uma simula\u00e7\u00e3o de ve\u00edculos e drones. Ela permite a leitura de um arquivo XML de tra\u00e7os, cria\u00e7\u00e3o de drones e exporta\u00e7\u00e3o de resultados. M\u00e9todos __init__(trace_path: str) Inicializa a simula\u00e7\u00e3o com base no caminho do arquivo XML de tra\u00e7os. Par\u00e2metros: - trace_path (str): Caminho do arquivo XML contendo os tra\u00e7os da simula\u00e7\u00e3o. read_xml(trace_path: str) L\u00ea o arquivo XML e popula a lista de ve\u00edculos. Par\u00e2metros: - trace_path (str): Caminho do arquivo XML. getVehicleById(id: str) -> Vehicle Retorna um ve\u00edculo pelo ID. Par\u00e2metros: - id (str): ID do ve\u00edculo. Retorna: - Vehicle : Objeto do ve\u00edculo. Lan\u00e7a: - ValueError : Se o ID n\u00e3o for encontrado. export_to_video(video_directory: str, limits_map: int = 0, only_vants: int = 0) Exporta a simula\u00e7\u00e3o para um v\u00eddeo. Par\u00e2metros: - video_directory (str): Diret\u00f3rio de sa\u00edda do v\u00eddeo. - limits_map (int): Limites do mapa. Se 0, calcula automaticamente. - only_vants (int): Define se apenas drones devem ser inclu\u00eddos no v\u00eddeo. get_timestep_total() -> int Retorna o total de intervalos de tempo da simula\u00e7\u00e3o. Retorna: - int : Total de intervalos de tempo. export_timesteps_to_xml(new_xml_path: str, geo: int = 1) Exporta os intervalos de tempo para um arquivo XML. Par\u00e2metros: - new_xml_path (str): Caminho do arquivo XML de sa\u00edda. - geo (int): Define se as coordenadas devem ser mantidas geogr\u00e1ficas. Se 0 converte para valores maiores que 0. create_drone_angular(start_point: Tuple[float, float], max_length: float, start_angle: int = 0, max_turns: int = 3, angle_alpha: int = 30, max_speed: float = 10) Cria um drone com um padr\u00e3o de movimento angular. Par\u00e2metros: - start_point (Tuple[float, float]): Ponto inicial (latitude, longitude). - max_length (float): Comprimento m\u00e1ximo de cada segmento. - start_angle (int): \u00c2ngulo inicial de movimento. - max_turns (int): N\u00famero m\u00e1ximo de curvas. - angle_alpha (int): \u00c2ngulo de inclina\u00e7\u00e3o para as curvas. - max_speed (float): Velocidade m\u00e1xima do drone. create_drone_static(point: Tuple[float, float]) Cria um drone estacion\u00e1rio em um ponto espec\u00edfico. Par\u00e2metros: - point (Tuple[float, float]): Coordenadas do ponto (latitude, longitude). create_drone_following(vehicle_id: str, offset_distance: float, max_speed: float = 10) Cria um drone que segue um ve\u00edculo. Par\u00e2metros: - vehicle_id (str): ID do ve\u00edculo a ser seguido. - offset_distance (float): Dist\u00e2ncia de offset entre o drone e o ve\u00edculo. - max_speed (float): Velocidade m\u00e1xima do drone. Lan\u00e7a: - ValueError : Se o ID do ve\u00edculo n\u00e3o for encontrado. create_drone_tractor(start_point: Tuple[float, float], width_between_tracks: float, max_length: float, max_turns: int, orientation: str = \"horizontal\", max_speed: float = 10) Cria um drone com um padr\u00e3o de movimento em trator. Par\u00e2metros: - start_point (Tuple[float, float]): Ponto inicial (latitude, longitude). - width_between_tracks (float): Dist\u00e2ncia entre as trilhas. - max_length (float): Comprimento m\u00e1ximo de cada trilha. - max_turns (int): N\u00famero m\u00e1ximo de curvas. - orientation (str): Orienta\u00e7\u00e3o do movimento (\"horizontal\" ou \"vertical\"). - max_speed (float): Velocidade m\u00e1xima do drone. create_drone_circular(center: Tuple[float, float], radius_meters: float, max_speed: float = 10, start_angle: int = 0) Cria um drone com um padr\u00e3o de movimento circular. Par\u00e2metros: - center (Tuple[float, float]): Coordenadas do centro do c\u00edrculo. - radius_meters (float): Raio do c\u00edrculo em metros. - max_speed (float): Velocidade m\u00e1xima do drone. - start_angle (int): \u00c2ngulo inicial de movimento. create_drone_square(center_point: Tuple[float, float], side_length: float, angle_degrees: int = 90, max_speed: float = 10) Cria um drone com um padr\u00e3o de movimento quadrado. Par\u00e2metros: - center_point (Tuple[float, float]): Coordenadas do centro do quadrado. - side_length (float): Comprimento do lado do quadrado. - angle_degrees (int): \u00c2ngulo inicial de movimento. - max_speed (float): Velocidade m\u00e1xima do drone. create_drone_generic(start_point: Tuple[float, float], distance_lists: List[float], angles_list: List[float], max_speed: float = 10) Cria um drone com um padr\u00e3o de movimento gen\u00e9rico. Par\u00e2metros: - start_point (Tuple[float, float]): Ponto inicial (latitude, longitude). - distance_lists (List[float]): Lista de dist\u00e2ncias a serem percorridas. - angles_list (List[float]): Lista de \u00e2ngulos de movimento. - max_speed (float): Velocidade m\u00e1xima do drone. addVehicle(vehicle: Vehicle) Adiciona um ve\u00edculo \u00e0 simula\u00e7\u00e3o. Par\u00e2metros: - vehicle (Vehicle): Objeto do ve\u00edculo a ser adicionado. Lan\u00e7a: - ValueError : Se o ID do ve\u00edculo j\u00e1 existir. removeVehicle(vehicleId: str) Remove um ve\u00edculo da simula\u00e7\u00e3o. Par\u00e2metros: - vehicleId (str): ID do ve\u00edculo a ser removido. Lan\u00e7a: - ValueError : Se o ID do ve\u00edculo n\u00e3o existir. changeLegend(oldLegend: str, newLegend: str) Altera a legenda de um tipo de ve\u00edculo. Par\u00e2metros: - oldLegend (str): Legenda antiga. - newLegend (str): Nova legenda. Lan\u00e7a: - ValueError : Se a legenda antiga n\u00e3o existir. print_all_vehicle_info(vehicle_id: str) Imprime todas as informa\u00e7\u00f5es de um ve\u00edculo. Par\u00e2metros: - vehicle_id (str): ID do ve\u00edculo. Lan\u00e7a: - ValueError : Se o ID do ve\u00edculo n\u00e3o for encontrado. get_vehicle_dict(vehicle_id: str) -> List[Optional[Dict]] Retorna um dicion\u00e1rio com todas as informa\u00e7\u00f5es de um ve\u00edculo. Par\u00e2metros: - vehicle_id (str): ID do ve\u00edculo. Retorna: - List[Optional[Dict]] : Lista de dicion\u00e1rios com informa\u00e7\u00f5es de cada intervalo de tempo. Lan\u00e7a: - ValueError : Se o ID do ve\u00edculo n\u00e3o for encontrado. vector_with_all_coordinates() -> List[List[Tuple[float, float]]] Retorna um vetor com todas as coordenadas dos ve\u00edculos. Retorna: - List[List[Tuple[float, float]]] : Lista de listas de coordenadas (latitude, longitude).","title":"Simulation.py"},{"location":"src/Simulation/#documentacao-da-classe-simulation","text":"A classe Simulation \u00e9 respons\u00e1vel por representar uma simula\u00e7\u00e3o de ve\u00edculos e drones. Ela permite a leitura de um arquivo XML de tra\u00e7os, cria\u00e7\u00e3o de drones e exporta\u00e7\u00e3o de resultados.","title":"Documenta\u00e7\u00e3o da Classe Simulation"},{"location":"src/Simulation/#metodos","text":"","title":"M\u00e9todos"},{"location":"src/Simulation/#__init__trace_path-str","text":"Inicializa a simula\u00e7\u00e3o com base no caminho do arquivo XML de tra\u00e7os. Par\u00e2metros: - trace_path (str): Caminho do arquivo XML contendo os tra\u00e7os da simula\u00e7\u00e3o.","title":"__init__(trace_path: str)"},{"location":"src/Simulation/#read_xmltrace_path-str","text":"L\u00ea o arquivo XML e popula a lista de ve\u00edculos. Par\u00e2metros: - trace_path (str): Caminho do arquivo XML.","title":"read_xml(trace_path: str)"},{"location":"src/Simulation/#getvehiclebyidid-str-vehicle","text":"Retorna um ve\u00edculo pelo ID. Par\u00e2metros: - id (str): ID do ve\u00edculo. Retorna: - Vehicle : Objeto do ve\u00edculo. Lan\u00e7a: - ValueError : Se o ID n\u00e3o for encontrado.","title":"getVehicleById(id: str) -&gt; Vehicle"},{"location":"src/Simulation/#export_to_videovideo_directory-str-limits_map-int-0-only_vants-int-0","text":"Exporta a simula\u00e7\u00e3o para um v\u00eddeo. Par\u00e2metros: - video_directory (str): Diret\u00f3rio de sa\u00edda do v\u00eddeo. - limits_map (int): Limites do mapa. Se 0, calcula automaticamente. - only_vants (int): Define se apenas drones devem ser inclu\u00eddos no v\u00eddeo.","title":"export_to_video(video_directory: str, limits_map: int = 0, only_vants: int = 0)"},{"location":"src/Simulation/#get_timestep_total-int","text":"Retorna o total de intervalos de tempo da simula\u00e7\u00e3o. Retorna: - int : Total de intervalos de tempo.","title":"get_timestep_total() -&gt; int"},{"location":"src/Simulation/#export_timesteps_to_xmlnew_xml_path-str-geo-int-1","text":"Exporta os intervalos de tempo para um arquivo XML. Par\u00e2metros: - new_xml_path (str): Caminho do arquivo XML de sa\u00edda. - geo (int): Define se as coordenadas devem ser mantidas geogr\u00e1ficas. Se 0 converte para valores maiores que 0.","title":"export_timesteps_to_xml(new_xml_path: str, geo: int = 1)"},{"location":"src/Simulation/#create_drone_angularstart_point-tuplefloat-float-max_length-float-start_angle-int-0-max_turns-int-3-angle_alpha-int-30-max_speed-float-10","text":"Cria um drone com um padr\u00e3o de movimento angular. Par\u00e2metros: - start_point (Tuple[float, float]): Ponto inicial (latitude, longitude). - max_length (float): Comprimento m\u00e1ximo de cada segmento. - start_angle (int): \u00c2ngulo inicial de movimento. - max_turns (int): N\u00famero m\u00e1ximo de curvas. - angle_alpha (int): \u00c2ngulo de inclina\u00e7\u00e3o para as curvas. - max_speed (float): Velocidade m\u00e1xima do drone.","title":"create_drone_angular(start_point: Tuple[float, float], max_length: float, start_angle: int = 0, max_turns: int = 3, angle_alpha: int = 30, max_speed: float = 10)"},{"location":"src/Simulation/#create_drone_staticpoint-tuplefloat-float","text":"Cria um drone estacion\u00e1rio em um ponto espec\u00edfico. Par\u00e2metros: - point (Tuple[float, float]): Coordenadas do ponto (latitude, longitude).","title":"create_drone_static(point: Tuple[float, float])"},{"location":"src/Simulation/#create_drone_followingvehicle_id-str-offset_distance-float-max_speed-float-10","text":"Cria um drone que segue um ve\u00edculo. Par\u00e2metros: - vehicle_id (str): ID do ve\u00edculo a ser seguido. - offset_distance (float): Dist\u00e2ncia de offset entre o drone e o ve\u00edculo. - max_speed (float): Velocidade m\u00e1xima do drone. Lan\u00e7a: - ValueError : Se o ID do ve\u00edculo n\u00e3o for encontrado.","title":"create_drone_following(vehicle_id: str, offset_distance: float, max_speed: float = 10)"},{"location":"src/Simulation/#create_drone_tractorstart_point-tuplefloat-float-width_between_tracks-float-max_length-float-max_turns-int-orientation-str-horizontal-max_speed-float-10","text":"Cria um drone com um padr\u00e3o de movimento em trator. Par\u00e2metros: - start_point (Tuple[float, float]): Ponto inicial (latitude, longitude). - width_between_tracks (float): Dist\u00e2ncia entre as trilhas. - max_length (float): Comprimento m\u00e1ximo de cada trilha. - max_turns (int): N\u00famero m\u00e1ximo de curvas. - orientation (str): Orienta\u00e7\u00e3o do movimento (\"horizontal\" ou \"vertical\"). - max_speed (float): Velocidade m\u00e1xima do drone.","title":"create_drone_tractor(start_point: Tuple[float, float], width_between_tracks: float, max_length: float, max_turns: int, orientation: str = \"horizontal\", max_speed: float = 10)"},{"location":"src/Simulation/#create_drone_circularcenter-tuplefloat-float-radius_meters-float-max_speed-float-10-start_angle-int-0","text":"Cria um drone com um padr\u00e3o de movimento circular. Par\u00e2metros: - center (Tuple[float, float]): Coordenadas do centro do c\u00edrculo. - radius_meters (float): Raio do c\u00edrculo em metros. - max_speed (float): Velocidade m\u00e1xima do drone. - start_angle (int): \u00c2ngulo inicial de movimento.","title":"create_drone_circular(center: Tuple[float, float], radius_meters: float, max_speed: float = 10, start_angle: int = 0)"},{"location":"src/Simulation/#create_drone_squarecenter_point-tuplefloat-float-side_length-float-angle_degrees-int-90-max_speed-float-10","text":"Cria um drone com um padr\u00e3o de movimento quadrado. Par\u00e2metros: - center_point (Tuple[float, float]): Coordenadas do centro do quadrado. - side_length (float): Comprimento do lado do quadrado. - angle_degrees (int): \u00c2ngulo inicial de movimento. - max_speed (float): Velocidade m\u00e1xima do drone.","title":"create_drone_square(center_point: Tuple[float, float], side_length: float, angle_degrees: int = 90, max_speed: float = 10)"},{"location":"src/Simulation/#create_drone_genericstart_point-tuplefloat-float-distance_lists-listfloat-angles_list-listfloat-max_speed-float-10","text":"Cria um drone com um padr\u00e3o de movimento gen\u00e9rico. Par\u00e2metros: - start_point (Tuple[float, float]): Ponto inicial (latitude, longitude). - distance_lists (List[float]): Lista de dist\u00e2ncias a serem percorridas. - angles_list (List[float]): Lista de \u00e2ngulos de movimento. - max_speed (float): Velocidade m\u00e1xima do drone.","title":"create_drone_generic(start_point: Tuple[float, float], distance_lists: List[float], angles_list: List[float], max_speed: float = 10)"},{"location":"src/Simulation/#addvehiclevehicle-vehicle","text":"Adiciona um ve\u00edculo \u00e0 simula\u00e7\u00e3o. Par\u00e2metros: - vehicle (Vehicle): Objeto do ve\u00edculo a ser adicionado. Lan\u00e7a: - ValueError : Se o ID do ve\u00edculo j\u00e1 existir.","title":"addVehicle(vehicle: Vehicle)"},{"location":"src/Simulation/#removevehiclevehicleid-str","text":"Remove um ve\u00edculo da simula\u00e7\u00e3o. Par\u00e2metros: - vehicleId (str): ID do ve\u00edculo a ser removido. Lan\u00e7a: - ValueError : Se o ID do ve\u00edculo n\u00e3o existir.","title":"removeVehicle(vehicleId: str)"},{"location":"src/Simulation/#changelegendoldlegend-str-newlegend-str","text":"Altera a legenda de um tipo de ve\u00edculo. Par\u00e2metros: - oldLegend (str): Legenda antiga. - newLegend (str): Nova legenda. Lan\u00e7a: - ValueError : Se a legenda antiga n\u00e3o existir.","title":"changeLegend(oldLegend: str, newLegend: str)"},{"location":"src/Simulation/#print_all_vehicle_infovehicle_id-str","text":"Imprime todas as informa\u00e7\u00f5es de um ve\u00edculo. Par\u00e2metros: - vehicle_id (str): ID do ve\u00edculo. Lan\u00e7a: - ValueError : Se o ID do ve\u00edculo n\u00e3o for encontrado.","title":"print_all_vehicle_info(vehicle_id: str)"},{"location":"src/Simulation/#get_vehicle_dictvehicle_id-str-listoptionaldict","text":"Retorna um dicion\u00e1rio com todas as informa\u00e7\u00f5es de um ve\u00edculo. Par\u00e2metros: - vehicle_id (str): ID do ve\u00edculo. Retorna: - List[Optional[Dict]] : Lista de dicion\u00e1rios com informa\u00e7\u00f5es de cada intervalo de tempo. Lan\u00e7a: - ValueError : Se o ID do ve\u00edculo n\u00e3o for encontrado.","title":"get_vehicle_dict(vehicle_id: str) -&gt; List[Optional[Dict]]"},{"location":"src/Simulation/#vector_with_all_coordinates-listlisttuplefloat-float","text":"Retorna um vetor com todas as coordenadas dos ve\u00edculos. Retorna: - List[List[Tuple[float, float]]] : Lista de listas de coordenadas (latitude, longitude).","title":"vector_with_all_coordinates() -&gt; List[List[Tuple[float, float]]]"},{"location":"src/Vehicle/","text":"Classes Vehicle e Timestep Este m\u00f3dulo cont\u00e9m as classes Vehicle e Timestep , que s\u00e3o usadas para armazenar e gerenciar informa\u00e7\u00f5es sobre ve\u00edculos e seus estados em diferentes momentos. Classe Vehicle A classe Vehicle \u00e9 projetada para armazenar e gerenciar informa\u00e7\u00f5es de trajet\u00f3ria de um ve\u00edculo. Atributos _id ( str ): Identificador \u00fanico do ve\u00edculo. _type ( str ): Tipo do ve\u00edculo. timesteps ( Dict[int, Timestep] ): Dicion\u00e1rio que armazena objetos Timestep , indexados pelo tempo (como inteiros). M\u00e9todos __init__(self, id: str, type: str) -> None Inicializa uma nova inst\u00e2ncia da classe Vehicle com o ID e tipo especificados. Par\u00e2metros: - id ( str ): Identificador \u00fanico do ve\u00edculo. - type ( str ): Tipo do ve\u00edculo. add_timestep(self, time: str, x: str, y: str, angle: str, speed: str, pos: str, lane: str, slope: str) -> None Adiciona um novo Timestep ao hist\u00f3rico do ve\u00edculo, convertendo os valores de entrada (strings) para os tipos apropriados. Par\u00e2metros: - time ( str ): Tempo do timestep. - x ( str ): Coordenada x da posi\u00e7\u00e3o do ve\u00edculo. - y ( str ): Coordenada y da posi\u00e7\u00e3o do ve\u00edculo. - angle ( str ): \u00c2ngulo de orienta\u00e7\u00e3o do ve\u00edculo. - speed ( str ): Velocidade do ve\u00edculo. - pos ( str ): Indicador de posi\u00e7\u00e3o do ve\u00edculo. - lane ( str ): Faixa em que o ve\u00edculo est\u00e1. - slope ( str ): Inclina\u00e7\u00e3o da via ou do ve\u00edculo. get_timestep(self, time: int) -> Optional[Timestep] Retorna o objeto Timestep para um determinado tempo, se existir; caso contr\u00e1rio, retorna None . Par\u00e2metros: - time ( int ): Tempo do timestep. Retorna: - Optional[Timestep] : Objeto Timestep ou None . get_timestep_dict(self, time: int) -> Optional[dict] Retorna uma representa\u00e7\u00e3o em dicion\u00e1rio do Timestep para um determinado tempo, se existir; caso contr\u00e1rio, retorna None . Par\u00e2metros: - time ( int ): Tempo do timestep. Retorna: - Optional[dict] : Dicion\u00e1rio com os dados do timestep ou None . print_timestep(self, time: int) -> None Imprime a representa\u00e7\u00e3o em dicion\u00e1rio do Timestep para um determinado tempo, se existir. Par\u00e2metros: - time ( int ): Tempo do timestep. is_present(self, time: int) -> bool Verifica se existe um Timestep para um determinado tempo. Par\u00e2metros: - time ( int ): Tempo do timestep. Retorna: - bool : True se o timestep existir; False caso contr\u00e1rio. id(self) -> str Retorna o ID do ve\u00edculo. Retorna: - str : ID do ve\u00edculo. type(self) -> str Retorna o tipo do ve\u00edculo. Retorna: - str : Tipo do ve\u00edculo. Classe Timestep A classe Timestep encapsula o estado de um ve\u00edculo em um momento espec\u00edfico, detalhando sua posi\u00e7\u00e3o, orienta\u00e7\u00e3o e atributos de movimento. Atributos _time ( int ): Momento do timestep. _x ( float ): Coordenada x da posi\u00e7\u00e3o do ve\u00edculo. _y ( float ): Coordenada y da posi\u00e7\u00e3o do ve\u00edculo. _angle ( float ): \u00c2ngulo de orienta\u00e7\u00e3o do ve\u00edculo. _speed ( float ): Velocidade do ve\u00edculo. _pos ( float ): Indicador de posi\u00e7\u00e3o do ve\u00edculo. _lane ( str ): Faixa em que o ve\u00edculo est\u00e1. _slope ( float ): Inclina\u00e7\u00e3o da via ou do ve\u00edculo. M\u00e9todos __init__(self, time: int, x: float, y: float, angle: float, speed: float, pos: float, lane: str, slope: float) -> None Inicializa um Timestep com detalhes de posi\u00e7\u00e3o, orienta\u00e7\u00e3o e movimento. Par\u00e2metros: - time ( int ): Momento do timestep. - x ( float ): Coordenada x da posi\u00e7\u00e3o do ve\u00edculo. - y ( float ): Coordenada y da posi\u00e7\u00e3o do ve\u00edculo. - angle ( float ): \u00c2ngulo de orienta\u00e7\u00e3o do ve\u00edculo. - speed ( float ): Velocidade do ve\u00edculo. - pos ( float ): Indicador de posi\u00e7\u00e3o do ve\u00edculo. - lane ( str ): Faixa em que o ve\u00edculo est\u00e1. - slope ( float ): Inclina\u00e7\u00e3o da via ou do ve\u00edculo. time(self) -> int Retorna o momento do timestep. Retorna: - int : Momento do timestep. x(self) -> float Retorna a coordenada x da posi\u00e7\u00e3o do ve\u00edculo. Retorna: - float : Coordenada x. y(self) -> float Retorna a coordenada y da posi\u00e7\u00e3o do ve\u00edculo. Retorna: - float : Coordenada y. angle(self) -> float Retorna o \u00e2ngulo de orienta\u00e7\u00e3o do ve\u00edculo. Retorna: - float : \u00c2ngulo de orienta\u00e7\u00e3o. speed(self) -> float Retorna a velocidade do ve\u00edculo. Retorna: - float : Velocidade. pos(self) -> float Retorna o indicador de posi\u00e7\u00e3o do ve\u00edculo. Retorna: - float : Indicador de posi\u00e7\u00e3o. lane(self) -> str Retorna a faixa em que o ve\u00edculo est\u00e1. Retorna: - str : Faixa do ve\u00edculo. slope(self) -> float Retorna a inclina\u00e7\u00e3o da via ou do ve\u00edculo. Retorna: - float : Inclina\u00e7\u00e3o. Exemplo de Uso Aqui est\u00e1 um exemplo de como usar as classes Vehicle e Timestep : # Criando um ve\u00edculo veiculo = Vehicle(id=\"car1\", type=\"car\") # Adicionando um timestep veiculo.add_timestep(time=\"1\", x=\"10.5\", y=\"20.3\", angle=\"45.0\", speed=\"30.0\", pos=\"0.0\", lane=\"left\", slope=\"0.0\") # Obtendo um timestep timestep = veiculo.get_timestep(time=1) if timestep: print(f\"Timestep encontrado: x={timestep.x()}, y={timestep.y()}\") # Verificando se um timestep existe if veiculo.is_present(time=1): print(\"Timestep existe!\")","title":"Vehicle.py"},{"location":"src/Vehicle/#classes-vehicle-e-timestep","text":"Este m\u00f3dulo cont\u00e9m as classes Vehicle e Timestep , que s\u00e3o usadas para armazenar e gerenciar informa\u00e7\u00f5es sobre ve\u00edculos e seus estados em diferentes momentos.","title":"Classes Vehicle e Timestep"},{"location":"src/Vehicle/#classe-vehicle","text":"A classe Vehicle \u00e9 projetada para armazenar e gerenciar informa\u00e7\u00f5es de trajet\u00f3ria de um ve\u00edculo.","title":"Classe Vehicle"},{"location":"src/Vehicle/#atributos","text":"_id ( str ): Identificador \u00fanico do ve\u00edculo. _type ( str ): Tipo do ve\u00edculo. timesteps ( Dict[int, Timestep] ): Dicion\u00e1rio que armazena objetos Timestep , indexados pelo tempo (como inteiros).","title":"Atributos"},{"location":"src/Vehicle/#metodos","text":"","title":"M\u00e9todos"},{"location":"src/Vehicle/#__init__self-id-str-type-str-none","text":"Inicializa uma nova inst\u00e2ncia da classe Vehicle com o ID e tipo especificados. Par\u00e2metros: - id ( str ): Identificador \u00fanico do ve\u00edculo. - type ( str ): Tipo do ve\u00edculo.","title":"__init__(self, id: str, type: str) -&gt; None"},{"location":"src/Vehicle/#add_timestepself-time-str-x-str-y-str-angle-str-speed-str-pos-str-lane-str-slope-str-none","text":"Adiciona um novo Timestep ao hist\u00f3rico do ve\u00edculo, convertendo os valores de entrada (strings) para os tipos apropriados. Par\u00e2metros: - time ( str ): Tempo do timestep. - x ( str ): Coordenada x da posi\u00e7\u00e3o do ve\u00edculo. - y ( str ): Coordenada y da posi\u00e7\u00e3o do ve\u00edculo. - angle ( str ): \u00c2ngulo de orienta\u00e7\u00e3o do ve\u00edculo. - speed ( str ): Velocidade do ve\u00edculo. - pos ( str ): Indicador de posi\u00e7\u00e3o do ve\u00edculo. - lane ( str ): Faixa em que o ve\u00edculo est\u00e1. - slope ( str ): Inclina\u00e7\u00e3o da via ou do ve\u00edculo.","title":"add_timestep(self, time: str, x: str, y: str, angle: str, speed: str, pos: str, lane: str, slope: str) -&gt; None"},{"location":"src/Vehicle/#get_timestepself-time-int-optionaltimestep","text":"Retorna o objeto Timestep para um determinado tempo, se existir; caso contr\u00e1rio, retorna None . Par\u00e2metros: - time ( int ): Tempo do timestep. Retorna: - Optional[Timestep] : Objeto Timestep ou None .","title":"get_timestep(self, time: int) -&gt; Optional[Timestep]"},{"location":"src/Vehicle/#get_timestep_dictself-time-int-optionaldict","text":"Retorna uma representa\u00e7\u00e3o em dicion\u00e1rio do Timestep para um determinado tempo, se existir; caso contr\u00e1rio, retorna None . Par\u00e2metros: - time ( int ): Tempo do timestep. Retorna: - Optional[dict] : Dicion\u00e1rio com os dados do timestep ou None .","title":"get_timestep_dict(self, time: int) -&gt; Optional[dict]"},{"location":"src/Vehicle/#print_timestepself-time-int-none","text":"Imprime a representa\u00e7\u00e3o em dicion\u00e1rio do Timestep para um determinado tempo, se existir. Par\u00e2metros: - time ( int ): Tempo do timestep.","title":"print_timestep(self, time: int) -&gt; None"},{"location":"src/Vehicle/#is_presentself-time-int-bool","text":"Verifica se existe um Timestep para um determinado tempo. Par\u00e2metros: - time ( int ): Tempo do timestep. Retorna: - bool : True se o timestep existir; False caso contr\u00e1rio.","title":"is_present(self, time: int) -&gt; bool"},{"location":"src/Vehicle/#idself-str","text":"Retorna o ID do ve\u00edculo. Retorna: - str : ID do ve\u00edculo.","title":"id(self) -&gt; str"},{"location":"src/Vehicle/#typeself-str","text":"Retorna o tipo do ve\u00edculo. Retorna: - str : Tipo do ve\u00edculo.","title":"type(self) -&gt; str"},{"location":"src/Vehicle/#classe-timestep","text":"A classe Timestep encapsula o estado de um ve\u00edculo em um momento espec\u00edfico, detalhando sua posi\u00e7\u00e3o, orienta\u00e7\u00e3o e atributos de movimento.","title":"Classe Timestep"},{"location":"src/Vehicle/#atributos_1","text":"_time ( int ): Momento do timestep. _x ( float ): Coordenada x da posi\u00e7\u00e3o do ve\u00edculo. _y ( float ): Coordenada y da posi\u00e7\u00e3o do ve\u00edculo. _angle ( float ): \u00c2ngulo de orienta\u00e7\u00e3o do ve\u00edculo. _speed ( float ): Velocidade do ve\u00edculo. _pos ( float ): Indicador de posi\u00e7\u00e3o do ve\u00edculo. _lane ( str ): Faixa em que o ve\u00edculo est\u00e1. _slope ( float ): Inclina\u00e7\u00e3o da via ou do ve\u00edculo.","title":"Atributos"},{"location":"src/Vehicle/#metodos_1","text":"","title":"M\u00e9todos"},{"location":"src/Vehicle/#__init__self-time-int-x-float-y-float-angle-float-speed-float-pos-float-lane-str-slope-float-none","text":"Inicializa um Timestep com detalhes de posi\u00e7\u00e3o, orienta\u00e7\u00e3o e movimento. Par\u00e2metros: - time ( int ): Momento do timestep. - x ( float ): Coordenada x da posi\u00e7\u00e3o do ve\u00edculo. - y ( float ): Coordenada y da posi\u00e7\u00e3o do ve\u00edculo. - angle ( float ): \u00c2ngulo de orienta\u00e7\u00e3o do ve\u00edculo. - speed ( float ): Velocidade do ve\u00edculo. - pos ( float ): Indicador de posi\u00e7\u00e3o do ve\u00edculo. - lane ( str ): Faixa em que o ve\u00edculo est\u00e1. - slope ( float ): Inclina\u00e7\u00e3o da via ou do ve\u00edculo.","title":"__init__(self, time: int, x: float, y: float, angle: float, speed: float, pos: float, lane: str, slope: float) -&gt; None"},{"location":"src/Vehicle/#timeself-int","text":"Retorna o momento do timestep. Retorna: - int : Momento do timestep.","title":"time(self) -&gt; int"},{"location":"src/Vehicle/#xself-float","text":"Retorna a coordenada x da posi\u00e7\u00e3o do ve\u00edculo. Retorna: - float : Coordenada x.","title":"x(self) -&gt; float"},{"location":"src/Vehicle/#yself-float","text":"Retorna a coordenada y da posi\u00e7\u00e3o do ve\u00edculo. Retorna: - float : Coordenada y.","title":"y(self) -&gt; float"},{"location":"src/Vehicle/#angleself-float","text":"Retorna o \u00e2ngulo de orienta\u00e7\u00e3o do ve\u00edculo. Retorna: - float : \u00c2ngulo de orienta\u00e7\u00e3o.","title":"angle(self) -&gt; float"},{"location":"src/Vehicle/#speedself-float","text":"Retorna a velocidade do ve\u00edculo. Retorna: - float : Velocidade.","title":"speed(self) -&gt; float"},{"location":"src/Vehicle/#posself-float","text":"Retorna o indicador de posi\u00e7\u00e3o do ve\u00edculo. Retorna: - float : Indicador de posi\u00e7\u00e3o.","title":"pos(self) -&gt; float"},{"location":"src/Vehicle/#laneself-str","text":"Retorna a faixa em que o ve\u00edculo est\u00e1. Retorna: - str : Faixa do ve\u00edculo.","title":"lane(self) -&gt; str"},{"location":"src/Vehicle/#slopeself-float","text":"Retorna a inclina\u00e7\u00e3o da via ou do ve\u00edculo. Retorna: - float : Inclina\u00e7\u00e3o.","title":"slope(self) -&gt; float"},{"location":"src/Vehicle/#exemplo-de-uso","text":"Aqui est\u00e1 um exemplo de como usar as classes Vehicle e Timestep : # Criando um ve\u00edculo veiculo = Vehicle(id=\"car1\", type=\"car\") # Adicionando um timestep veiculo.add_timestep(time=\"1\", x=\"10.5\", y=\"20.3\", angle=\"45.0\", speed=\"30.0\", pos=\"0.0\", lane=\"left\", slope=\"0.0\") # Obtendo um timestep timestep = veiculo.get_timestep(time=1) if timestep: print(f\"Timestep encontrado: x={timestep.x()}, y={timestep.y()}\") # Verificando se um timestep existe if veiculo.is_present(time=1): print(\"Timestep existe!\")","title":"Exemplo de Uso"},{"location":"src/creating_drones/","text":"Documenta\u00e7\u00e3o do C\u00f3digo de Gera\u00e7\u00e3o de Coordenadas para Drones Fun\u00e7\u00f5es haversine_distance Calcula a dist\u00e2ncia do c\u00edrculo m\u00e1ximo entre dois pontos na superf\u00edcie da Terra com base em suas latitudes e longitudes. Par\u00e2metros: - lat1 (float) : Latitude do primeiro ponto em graus. - lon1 (float) : Longitude do primeiro ponto em graus. - lat2 (float) : Latitude do segundo ponto em graus. - lon2 (float) : Longitude do segundo ponto em graus. Retorno: - float : Dist\u00e2ncia entre os dois pontos em metros. calculate_angle Calcula o \u00e2ngulo de dire\u00e7\u00e3o entre dois pontos na superf\u00edcie da Terra. Par\u00e2metros: - p1 (Tuple[float, float]) : Tupla contendo a latitude e longitude do primeiro ponto. - p2 (Tuple[float, float]) : Tupla contendo a latitude e longitude do segundo ponto. Retorno: - float : \u00c2ngulo de dire\u00e7\u00e3o em radianos. limit_speed Limita a dist\u00e2ncia entre dois pontos a um valor m\u00e1ximo, preservando a dire\u00e7\u00e3o. Par\u00e2metros: - start_point (Tuple[float, float]) : Ponto inicial (latitude, longitude). - end_point (Tuple[float, float]) : Ponto final (latitude, longitude). - max_distance (float) : Dist\u00e2ncia m\u00e1xima permitida em metros. Retorno: - Tuple[float, float] : Novo ponto ajustado para n\u00e3o exceder a dist\u00e2ncia m\u00e1xima. generate_drone_coordinates Gera coordenadas para o drone com base nas coordenadas do ve\u00edculo e na dist\u00e2ncia de offset. Par\u00e2metros: - vehicle_coordinates (List[Tuple[float, float]]) : Lista de coordenadas (latitude, longitude) do ve\u00edculo. - offset_distance (float) : Dist\u00e2ncia entre o ve\u00edculo e o drone em metros. - max_speed (float) : Velocidade m\u00e1xima do drone em metros por segundo. - smoothing_factor (float) : Fator de suaviza\u00e7\u00e3o para movimentos suaves. Valor entre 0 e 1. Retorno: - List[Tuple[float, float, float]] : Lista de coordenadas (latitude, longitude, velocidade) para o drone. generate_drone_coordinates_static Gera coordenadas discretas para o drone girando em torno de um ponto espec\u00edfico na Terra. Par\u00e2metros: - point (Tuple[float, float]) : Coordenadas do centro (latitude, longitude) em graus. - num_samples (int) : N\u00famero de amostras discretas a serem geradas. Retorno: - List[Tuple[float, float, float]] : Lista de coordenadas (latitude, longitude, velocidade) do drone. generate_generic_pattern Gera coordenadas para um padr\u00e3o de mobilidade gen\u00e9rico. Par\u00e2metros: - start_point (Tuple[float, float]) : Coordenadas iniciais (latitude, longitude). - distance_lists (List[float]) : Lista de dist\u00e2ncias a serem percorridas em cada estado. - angles_list (List[float]) : Lista de \u00e2ngulos de movimento para cada estado. - num_samples (int) : N\u00famero de amostras a serem geradas. - max_speed (float) : Velocidade m\u00e1xima do drone em metros por segundo. Retorno: - List[Tuple[float, float, float]] : Lista de coordenadas (latitude, longitude, velocidade) para o padr\u00e3o de mobilidade. create_drone_static_point Cria um drone estacion\u00e1rio em um ponto espec\u00edfico. Par\u00e2metros: - timesteps (int) : N\u00famero de intervalos de tempo. - drone_id (str) : Identificador do drone. - point (Tuple[float, float]) : Coordenadas do ponto (latitude, longitude). Retorno: - Vehicle : Objeto do drone com as coordenadas definidas. create_drone_following_object Cria um drone que segue um objeto m\u00f3vel. Par\u00e2metros: - timesteps (int) : N\u00famero de intervalos de tempo. - drone_id (str) : Identificador do drone. - vehicle (Vehicle) : Objeto do ve\u00edculo a ser seguido. - offset_distance (float) : Dist\u00e2ncia de offset entre o drone e o ve\u00edculo. - max_speed (float) : Velocidade m\u00e1xima do drone. Retorno: - Vehicle : Objeto do drone com as coordenadas definidas. create_drone_generic_pattern Cria um drone com um padr\u00e3o de mobilidade gen\u00e9rico. Par\u00e2metros: - timesteps (int) : N\u00famero de intervalos de tempo. - drone_id (str) : Identificador do drone. - start_point (Tuple[float, float]) : Coordenadas iniciais (latitude, longitude). - distance_lists (List[float]) : Lista de dist\u00e2ncias a serem percorridas. - angles_list (List[float]) : Lista de \u00e2ngulos de movimento. - max_speed (float) : Velocidade m\u00e1xima do drone. Retorno: - Vehicle : Objeto do drone com as coordenadas definidas.","title":"creating_drones.py"},{"location":"src/creating_drones/#documentacao-do-codigo-de-geracao-de-coordenadas-para-drones","text":"","title":"Documenta\u00e7\u00e3o do C\u00f3digo de Gera\u00e7\u00e3o de Coordenadas para Drones"},{"location":"src/creating_drones/#funcoes","text":"","title":"Fun\u00e7\u00f5es"},{"location":"src/creating_drones/#haversine_distance","text":"Calcula a dist\u00e2ncia do c\u00edrculo m\u00e1ximo entre dois pontos na superf\u00edcie da Terra com base em suas latitudes e longitudes. Par\u00e2metros: - lat1 (float) : Latitude do primeiro ponto em graus. - lon1 (float) : Longitude do primeiro ponto em graus. - lat2 (float) : Latitude do segundo ponto em graus. - lon2 (float) : Longitude do segundo ponto em graus. Retorno: - float : Dist\u00e2ncia entre os dois pontos em metros.","title":"haversine_distance"},{"location":"src/creating_drones/#calculate_angle","text":"Calcula o \u00e2ngulo de dire\u00e7\u00e3o entre dois pontos na superf\u00edcie da Terra. Par\u00e2metros: - p1 (Tuple[float, float]) : Tupla contendo a latitude e longitude do primeiro ponto. - p2 (Tuple[float, float]) : Tupla contendo a latitude e longitude do segundo ponto. Retorno: - float : \u00c2ngulo de dire\u00e7\u00e3o em radianos.","title":"calculate_angle"},{"location":"src/creating_drones/#limit_speed","text":"Limita a dist\u00e2ncia entre dois pontos a um valor m\u00e1ximo, preservando a dire\u00e7\u00e3o. Par\u00e2metros: - start_point (Tuple[float, float]) : Ponto inicial (latitude, longitude). - end_point (Tuple[float, float]) : Ponto final (latitude, longitude). - max_distance (float) : Dist\u00e2ncia m\u00e1xima permitida em metros. Retorno: - Tuple[float, float] : Novo ponto ajustado para n\u00e3o exceder a dist\u00e2ncia m\u00e1xima.","title":"limit_speed"},{"location":"src/creating_drones/#generate_drone_coordinates","text":"Gera coordenadas para o drone com base nas coordenadas do ve\u00edculo e na dist\u00e2ncia de offset. Par\u00e2metros: - vehicle_coordinates (List[Tuple[float, float]]) : Lista de coordenadas (latitude, longitude) do ve\u00edculo. - offset_distance (float) : Dist\u00e2ncia entre o ve\u00edculo e o drone em metros. - max_speed (float) : Velocidade m\u00e1xima do drone em metros por segundo. - smoothing_factor (float) : Fator de suaviza\u00e7\u00e3o para movimentos suaves. Valor entre 0 e 1. Retorno: - List[Tuple[float, float, float]] : Lista de coordenadas (latitude, longitude, velocidade) para o drone.","title":"generate_drone_coordinates"},{"location":"src/creating_drones/#generate_drone_coordinates_static","text":"Gera coordenadas discretas para o drone girando em torno de um ponto espec\u00edfico na Terra. Par\u00e2metros: - point (Tuple[float, float]) : Coordenadas do centro (latitude, longitude) em graus. - num_samples (int) : N\u00famero de amostras discretas a serem geradas. Retorno: - List[Tuple[float, float, float]] : Lista de coordenadas (latitude, longitude, velocidade) do drone.","title":"generate_drone_coordinates_static"},{"location":"src/creating_drones/#generate_generic_pattern","text":"Gera coordenadas para um padr\u00e3o de mobilidade gen\u00e9rico. Par\u00e2metros: - start_point (Tuple[float, float]) : Coordenadas iniciais (latitude, longitude). - distance_lists (List[float]) : Lista de dist\u00e2ncias a serem percorridas em cada estado. - angles_list (List[float]) : Lista de \u00e2ngulos de movimento para cada estado. - num_samples (int) : N\u00famero de amostras a serem geradas. - max_speed (float) : Velocidade m\u00e1xima do drone em metros por segundo. Retorno: - List[Tuple[float, float, float]] : Lista de coordenadas (latitude, longitude, velocidade) para o padr\u00e3o de mobilidade.","title":"generate_generic_pattern"},{"location":"src/creating_drones/#create_drone_static_point","text":"Cria um drone estacion\u00e1rio em um ponto espec\u00edfico. Par\u00e2metros: - timesteps (int) : N\u00famero de intervalos de tempo. - drone_id (str) : Identificador do drone. - point (Tuple[float, float]) : Coordenadas do ponto (latitude, longitude). Retorno: - Vehicle : Objeto do drone com as coordenadas definidas.","title":"create_drone_static_point"},{"location":"src/creating_drones/#create_drone_following_object","text":"Cria um drone que segue um objeto m\u00f3vel. Par\u00e2metros: - timesteps (int) : N\u00famero de intervalos de tempo. - drone_id (str) : Identificador do drone. - vehicle (Vehicle) : Objeto do ve\u00edculo a ser seguido. - offset_distance (float) : Dist\u00e2ncia de offset entre o drone e o ve\u00edculo. - max_speed (float) : Velocidade m\u00e1xima do drone. Retorno: - Vehicle : Objeto do drone com as coordenadas definidas.","title":"create_drone_following_object"},{"location":"src/creating_drones/#create_drone_generic_pattern","text":"Cria um drone com um padr\u00e3o de mobilidade gen\u00e9rico. Par\u00e2metros: - timesteps (int) : N\u00famero de intervalos de tempo. - drone_id (str) : Identificador do drone. - start_point (Tuple[float, float]) : Coordenadas iniciais (latitude, longitude). - distance_lists (List[float]) : Lista de dist\u00e2ncias a serem percorridas. - angles_list (List[float]) : Lista de \u00e2ngulos de movimento. - max_speed (float) : Velocidade m\u00e1xima do drone. Retorno: - Vehicle : Objeto do drone com as coordenadas definidas.","title":"create_drone_generic_pattern"},{"location":"src/videomaker/","text":"Fun\u00e7\u00f5es de Gera\u00e7\u00e3o de V\u00eddeo com Coordenadas Vetoriais Este m\u00f3dulo cont\u00e9m fun\u00e7\u00f5es para gerar v\u00eddeos animados com base nas coordenadas de ve\u00edculos e criar GeoDataFrames otimizados para visualiza\u00e7\u00e3o em mapas. Fun\u00e7\u00e3o _create_dataframe_optimized A fun\u00e7\u00e3o _create_dataframe_optimized cria um GeoDataFrame otimizado a partir de coordenadas vetoriais ou limites de mapa. Par\u00e2metros vector_coordinates ( List[List[List[Tuple[float, float]]] ): Lista de coordenadas dos ve\u00edculos. limits_map ( Union[List[Tuple[float, float]], int] ): Limites do mapa. Se for 0 , os limites ser\u00e3o calculados automaticamente. Retorno Tuple[gpd.GeoDataFrame, float] : Retorna um GeoDataFrame contendo o pol\u00edgono do cen\u00e1rio e a propor\u00e7\u00e3o entre largura e altura. Fun\u00e7\u00e3o generate_video_with_vector_coordinates_image A fun\u00e7\u00e3o generate_video_with_vector_coordinates_image gera um v\u00eddeo animado com base nas coordenadas vetoriais dos ve\u00edculos. Par\u00e2metros vector_coordinates ( List[List[List[Tuple[float, float]]] ): Lista de coordenadas dos ve\u00edculos. directory_video ( str ): Caminho onde o v\u00eddeo ser\u00e1 salvo. names ( List[str] ): Nomes dos ve\u00edculos para a legenda. (Padr\u00e3o: lista vazia) limits_map ( Union[List[Tuple[float, float]], int] ): Limites do mapa. Se for 0 , os limites ser\u00e3o calculados automaticamente. (Padr\u00e3o: 0 ) only_vants ( int ): Se for 1 , considera apenas os UAVs (ve\u00edculos a\u00e9reos n\u00e3o tripulados). (Padr\u00e3o: 0 ) Descri\u00e7\u00e3o Se only_vants for 1 , apenas os UAVs ser\u00e3o considerados. Cria o cen\u00e1rio com um GeoDataFrame e calcula sua propor\u00e7\u00e3o. Define uma lista de cores para os ve\u00edculos e atribui uma cor espec\u00edfica para cada tipo. Plota o cen\u00e1rio e adiciona uma legenda para os ve\u00edculos. Adiciona um mapa de fundo usando o provedor OpenStreetMap. Pr\u00e9-computa as coordenadas para todos os frames e configura a anima\u00e7\u00e3o. Salva o v\u00eddeo usando o ffmpeg . Fun\u00e7\u00e3o Interna update Atualiza a posi\u00e7\u00e3o dos pontos no gr\u00e1fico para cada frame da anima\u00e7\u00e3o. frame ( int ): N\u00famero do frame atual. Retorna: Tuple[PathCollection] com os pontos atualizados. Depend\u00eancias Este m\u00f3dulo utiliza as seguintes bibliotecas: numpy : Processamento de coordenadas vetoriais. matplotlib.pyplot : Gera\u00e7\u00e3o de gr\u00e1ficos e v\u00eddeos. matplotlib.animation.FuncAnimation : Anima\u00e7\u00e3o dos gr\u00e1ficos. contextily : Adi\u00e7\u00e3o de mapas de fundo. shapely.geometry.Polygon : Cria\u00e7\u00e3o de pol\u00edgonos de limite para o mapa. geopandas : Cria\u00e7\u00e3o de GeoDataFrames para visualiza\u00e7\u00e3o geogr\u00e1fica. typing : Defini\u00e7\u00e3o de tipos para os par\u00e2metros e retornos. matplotlib.collections.PathCollection : Manipula\u00e7\u00e3o de cole\u00e7\u00f5es de caminhos no gr\u00e1fico.","title":"videomaker.py"},{"location":"src/videomaker/#funcoes-de-geracao-de-video-com-coordenadas-vetoriais","text":"Este m\u00f3dulo cont\u00e9m fun\u00e7\u00f5es para gerar v\u00eddeos animados com base nas coordenadas de ve\u00edculos e criar GeoDataFrames otimizados para visualiza\u00e7\u00e3o em mapas.","title":"Fun\u00e7\u00f5es de Gera\u00e7\u00e3o de V\u00eddeo com Coordenadas Vetoriais"},{"location":"src/videomaker/#funcao-_create_dataframe_optimized","text":"A fun\u00e7\u00e3o _create_dataframe_optimized cria um GeoDataFrame otimizado a partir de coordenadas vetoriais ou limites de mapa.","title":"Fun\u00e7\u00e3o _create_dataframe_optimized"},{"location":"src/videomaker/#parametros","text":"vector_coordinates ( List[List[List[Tuple[float, float]]] ): Lista de coordenadas dos ve\u00edculos. limits_map ( Union[List[Tuple[float, float]], int] ): Limites do mapa. Se for 0 , os limites ser\u00e3o calculados automaticamente.","title":"Par\u00e2metros"},{"location":"src/videomaker/#retorno","text":"Tuple[gpd.GeoDataFrame, float] : Retorna um GeoDataFrame contendo o pol\u00edgono do cen\u00e1rio e a propor\u00e7\u00e3o entre largura e altura.","title":"Retorno"},{"location":"src/videomaker/#funcao-generate_video_with_vector_coordinates_image","text":"A fun\u00e7\u00e3o generate_video_with_vector_coordinates_image gera um v\u00eddeo animado com base nas coordenadas vetoriais dos ve\u00edculos.","title":"Fun\u00e7\u00e3o generate_video_with_vector_coordinates_image"},{"location":"src/videomaker/#parametros_1","text":"vector_coordinates ( List[List[List[Tuple[float, float]]] ): Lista de coordenadas dos ve\u00edculos. directory_video ( str ): Caminho onde o v\u00eddeo ser\u00e1 salvo. names ( List[str] ): Nomes dos ve\u00edculos para a legenda. (Padr\u00e3o: lista vazia) limits_map ( Union[List[Tuple[float, float]], int] ): Limites do mapa. Se for 0 , os limites ser\u00e3o calculados automaticamente. (Padr\u00e3o: 0 ) only_vants ( int ): Se for 1 , considera apenas os UAVs (ve\u00edculos a\u00e9reos n\u00e3o tripulados). (Padr\u00e3o: 0 )","title":"Par\u00e2metros"},{"location":"src/videomaker/#descricao","text":"Se only_vants for 1 , apenas os UAVs ser\u00e3o considerados. Cria o cen\u00e1rio com um GeoDataFrame e calcula sua propor\u00e7\u00e3o. Define uma lista de cores para os ve\u00edculos e atribui uma cor espec\u00edfica para cada tipo. Plota o cen\u00e1rio e adiciona uma legenda para os ve\u00edculos. Adiciona um mapa de fundo usando o provedor OpenStreetMap. Pr\u00e9-computa as coordenadas para todos os frames e configura a anima\u00e7\u00e3o. Salva o v\u00eddeo usando o ffmpeg .","title":"Descri\u00e7\u00e3o"},{"location":"src/videomaker/#funcao-interna-update","text":"Atualiza a posi\u00e7\u00e3o dos pontos no gr\u00e1fico para cada frame da anima\u00e7\u00e3o. frame ( int ): N\u00famero do frame atual. Retorna: Tuple[PathCollection] com os pontos atualizados.","title":"Fun\u00e7\u00e3o Interna update"},{"location":"src/videomaker/#dependencias","text":"Este m\u00f3dulo utiliza as seguintes bibliotecas: numpy : Processamento de coordenadas vetoriais. matplotlib.pyplot : Gera\u00e7\u00e3o de gr\u00e1ficos e v\u00eddeos. matplotlib.animation.FuncAnimation : Anima\u00e7\u00e3o dos gr\u00e1ficos. contextily : Adi\u00e7\u00e3o de mapas de fundo. shapely.geometry.Polygon : Cria\u00e7\u00e3o de pol\u00edgonos de limite para o mapa. geopandas : Cria\u00e7\u00e3o de GeoDataFrames para visualiza\u00e7\u00e3o geogr\u00e1fica. typing : Defini\u00e7\u00e3o de tipos para os par\u00e2metros e retornos. matplotlib.collections.PathCollection : Manipula\u00e7\u00e3o de cole\u00e7\u00f5es de caminhos no gr\u00e1fico.","title":"Depend\u00eancias"},{"location":"src/utils/conversionMeters/","text":"Convers\u00e3o de Coordenadas Este m\u00f3dulo fornece fun\u00e7\u00f5es para converter coordenadas de latitude e longitude em coordenadas UTM (Universal Transversa de Mercator) e coordenadas Cartesianas (x, y). Al\u00e9m disso, ele inclui uma fun\u00e7\u00e3o para processar um arquivo XML, convertendo as coordenadas de latitude e longitude contidas nele para coordenadas Cartesianas. Fun\u00e7\u00f5es longitude_to_utm_zone(longitude: float) -> int Calcula o n\u00famero da zona UTM a partir da longitude. Par\u00e2metros: - longitude (float): Longitude em graus decimais. Retorna: - int : N\u00famero da zona UTM. latlon_to_utm(lat: float, lon: float) -> Tuple[float, float] Converte latitude e longitude para coordenadas UTM. Par\u00e2metros: - lat (float): Latitude em graus decimais. - lon (float): Longitude em graus decimais. Retorna: - Tuple[float, float] : Coordenadas UTM (Easting, Northing). latlon_to_xy(lat: float, lon: float, min_lat: float, min_lon: float) -> Tuple[float, float] Converte latitude e longitude para coordenadas Cartesianas (x, y). Par\u00e2metros: - lat (float): Latitude em graus decimais. - lon (float): Longitude em graus decimais. - min_lat (float): Latitude m\u00ednima de refer\u00eancia. - min_lon (float): Longitude m\u00ednima de refer\u00eancia. Retorna: - Tuple[float, float] : Coordenadas Cartesianas em metros. convert_coordinates(input_xml_path: str, output_xml_path: str) -> None Converte coordenadas de latitude e longitude em um arquivo XML para coordenadas Cartesianas. Par\u00e2metros: - input_xml_path (str): Caminho do arquivo XML de entrada. - output_xml_path (str): Caminho do arquivo XML de sa\u00edda. Retorna: - None Exemplo de Uso Aqui est\u00e1 um exemplo de como usar as fun\u00e7\u00f5es deste m\u00f3dulo: from coordenadas import latlon_to_utm, latlon_to_xy, convert_coordinates # Convertendo latitude e longitude para UTM lat, lon = -23.5505, -46.6333 easting, northing = latlon_to_utm(lat, lon) print(f\"UTM: {easting}, {northing}\") # Convertendo latitude e longitude para coordenadas Cartesianas min_lat, min_lon = -23.5600, -46.6400 x, y = latlon_to_xy(lat, lon, min_lat, min_lon) print(f\"Cartesianas: {x}, {y}\") # Convertendo coordenadas em um arquivo XML convert_coordinates('input.xml', 'output.xml')","title":"conversionMeters.py"},{"location":"src/utils/conversionMeters/#conversao-de-coordenadas","text":"Este m\u00f3dulo fornece fun\u00e7\u00f5es para converter coordenadas de latitude e longitude em coordenadas UTM (Universal Transversa de Mercator) e coordenadas Cartesianas (x, y). Al\u00e9m disso, ele inclui uma fun\u00e7\u00e3o para processar um arquivo XML, convertendo as coordenadas de latitude e longitude contidas nele para coordenadas Cartesianas.","title":"Convers\u00e3o de Coordenadas"},{"location":"src/utils/conversionMeters/#funcoes","text":"","title":"Fun\u00e7\u00f5es"},{"location":"src/utils/conversionMeters/#longitude_to_utm_zonelongitude-float-int","text":"Calcula o n\u00famero da zona UTM a partir da longitude. Par\u00e2metros: - longitude (float): Longitude em graus decimais. Retorna: - int : N\u00famero da zona UTM.","title":"longitude_to_utm_zone(longitude: float) -&gt; int"},{"location":"src/utils/conversionMeters/#latlon_to_utmlat-float-lon-float-tuplefloat-float","text":"Converte latitude e longitude para coordenadas UTM. Par\u00e2metros: - lat (float): Latitude em graus decimais. - lon (float): Longitude em graus decimais. Retorna: - Tuple[float, float] : Coordenadas UTM (Easting, Northing).","title":"latlon_to_utm(lat: float, lon: float) -&gt; Tuple[float, float]"},{"location":"src/utils/conversionMeters/#latlon_to_xylat-float-lon-float-min_lat-float-min_lon-float-tuplefloat-float","text":"Converte latitude e longitude para coordenadas Cartesianas (x, y). Par\u00e2metros: - lat (float): Latitude em graus decimais. - lon (float): Longitude em graus decimais. - min_lat (float): Latitude m\u00ednima de refer\u00eancia. - min_lon (float): Longitude m\u00ednima de refer\u00eancia. Retorna: - Tuple[float, float] : Coordenadas Cartesianas em metros.","title":"latlon_to_xy(lat: float, lon: float, min_lat: float, min_lon: float) -&gt; Tuple[float, float]"},{"location":"src/utils/conversionMeters/#convert_coordinatesinput_xml_path-str-output_xml_path-str-none","text":"Converte coordenadas de latitude e longitude em um arquivo XML para coordenadas Cartesianas. Par\u00e2metros: - input_xml_path (str): Caminho do arquivo XML de entrada. - output_xml_path (str): Caminho do arquivo XML de sa\u00edda. Retorna: - None","title":"convert_coordinates(input_xml_path: str, output_xml_path: str) -&gt; None"},{"location":"src/utils/conversionMeters/#exemplo-de-uso","text":"Aqui est\u00e1 um exemplo de como usar as fun\u00e7\u00f5es deste m\u00f3dulo: from coordenadas import latlon_to_utm, latlon_to_xy, convert_coordinates # Convertendo latitude e longitude para UTM lat, lon = -23.5505, -46.6333 easting, northing = latlon_to_utm(lat, lon) print(f\"UTM: {easting}, {northing}\") # Convertendo latitude e longitude para coordenadas Cartesianas min_lat, min_lon = -23.5600, -46.6400 x, y = latlon_to_xy(lat, lon, min_lat, min_lon) print(f\"Cartesianas: {x}, {y}\") # Convertendo coordenadas em um arquivo XML convert_coordinates('input.xml', 'output.xml')","title":"Exemplo de Uso"}]}